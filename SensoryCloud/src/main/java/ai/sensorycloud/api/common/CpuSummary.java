// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/common.proto

package ai.sensorycloud.api.common;

/**
 * <pre>
 * Summary of all CPU useage as measured in ticks
 * </pre>
 *
 * Protobuf type {@code sensory.api.common.CpuSummary}
 */
public final class CpuSummary extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:sensory.api.common.CpuSummary)
    CpuSummaryOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CpuSummary.newBuilder() to construct.
  private CpuSummary(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CpuSummary() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CpuSummary();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CpuSummary(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            user_ = input.readUInt64();
            break;
          }
          case 16: {

            nice_ = input.readUInt64();
            break;
          }
          case 24: {

            system_ = input.readUInt64();
            break;
          }
          case 32: {

            idle_ = input.readUInt64();
            break;
          }
          case 40: {

            ioWait_ = input.readUInt64();
            break;
          }
          case 48: {

            irq_ = input.readUInt64();
            break;
          }
          case 56: {

            softIrq_ = input.readUInt64();
            break;
          }
          case 64: {

            steal_ = input.readUInt64();
            break;
          }
          case 72: {

            guest_ = input.readUInt64();
            break;
          }
          case 80: {

            guestNice_ = input.readUInt64();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ai.sensorycloud.api.common.SensoryApiCommonProto.internal_static_sensory_api_common_CpuSummary_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ai.sensorycloud.api.common.SensoryApiCommonProto.internal_static_sensory_api_common_CpuSummary_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ai.sensorycloud.api.common.CpuSummary.class, ai.sensorycloud.api.common.CpuSummary.Builder.class);
  }

  public static final int USER_FIELD_NUMBER = 1;
  private long user_;
  /**
   * <pre>
   * normal processes executing in user mode
   * </pre>
   *
   * <code>uint64 user = 1;</code>
   * @return The user.
   */
  @java.lang.Override
  public long getUser() {
    return user_;
  }

  public static final int NICE_FIELD_NUMBER = 2;
  private long nice_;
  /**
   * <pre>
   * niced processes executing in user mode
   * </pre>
   *
   * <code>uint64 nice = 2;</code>
   * @return The nice.
   */
  @java.lang.Override
  public long getNice() {
    return nice_;
  }

  public static final int SYSTEM_FIELD_NUMBER = 3;
  private long system_;
  /**
   * <pre>
   * processes executing in kernel mode
   * </pre>
   *
   * <code>uint64 system = 3;</code>
   * @return The system.
   */
  @java.lang.Override
  public long getSystem() {
    return system_;
  }

  public static final int IDLE_FIELD_NUMBER = 4;
  private long idle_;
  /**
   * <pre>
   * idle cpu
   * </pre>
   *
   * <code>uint64 idle = 4;</code>
   * @return The idle.
   */
  @java.lang.Override
  public long getIdle() {
    return idle_;
  }

  public static final int IOWAIT_FIELD_NUMBER = 5;
  private long ioWait_;
  /**
   * <pre>
   * waiting for I/O to complete
   * </pre>
   *
   * <code>uint64 ioWait = 5;</code>
   * @return The ioWait.
   */
  @java.lang.Override
  public long getIoWait() {
    return ioWait_;
  }

  public static final int IRQ_FIELD_NUMBER = 6;
  private long irq_;
  /**
   * <pre>
   * servicing interrupts
   * </pre>
   *
   * <code>uint64 irq = 6;</code>
   * @return The irq.
   */
  @java.lang.Override
  public long getIrq() {
    return irq_;
  }

  public static final int SOFTIRQ_FIELD_NUMBER = 7;
  private long softIrq_;
  /**
   * <pre>
   * servicing softirqs
   * </pre>
   *
   * <code>uint64 softIrq = 7;</code>
   * @return The softIrq.
   */
  @java.lang.Override
  public long getSoftIrq() {
    return softIrq_;
  }

  public static final int STEAL_FIELD_NUMBER = 8;
  private long steal_;
  /**
   * <pre>
   * counts the ticks spent executing other virtual hosts
   * </pre>
   *
   * <code>uint64 steal = 8;</code>
   * @return The steal.
   */
  @java.lang.Override
  public long getSteal() {
    return steal_;
  }

  public static final int GUEST_FIELD_NUMBER = 9;
  private long guest_;
  /**
   * <pre>
   * counts the time spent running a virtual CPU for guest operating systems under the control of the Linux kernel
   * </pre>
   *
   * <code>uint64 guest = 9;</code>
   * @return The guest.
   */
  @java.lang.Override
  public long getGuest() {
    return guest_;
  }

  public static final int GUESTNICE_FIELD_NUMBER = 10;
  private long guestNice_;
  /**
   * <pre>
   * time spent running a niced guest
   * </pre>
   *
   * <code>uint64 guestNice = 10;</code>
   * @return The guestNice.
   */
  @java.lang.Override
  public long getGuestNice() {
    return guestNice_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (user_ != 0L) {
      output.writeUInt64(1, user_);
    }
    if (nice_ != 0L) {
      output.writeUInt64(2, nice_);
    }
    if (system_ != 0L) {
      output.writeUInt64(3, system_);
    }
    if (idle_ != 0L) {
      output.writeUInt64(4, idle_);
    }
    if (ioWait_ != 0L) {
      output.writeUInt64(5, ioWait_);
    }
    if (irq_ != 0L) {
      output.writeUInt64(6, irq_);
    }
    if (softIrq_ != 0L) {
      output.writeUInt64(7, softIrq_);
    }
    if (steal_ != 0L) {
      output.writeUInt64(8, steal_);
    }
    if (guest_ != 0L) {
      output.writeUInt64(9, guest_);
    }
    if (guestNice_ != 0L) {
      output.writeUInt64(10, guestNice_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (user_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(1, user_);
    }
    if (nice_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(2, nice_);
    }
    if (system_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(3, system_);
    }
    if (idle_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(4, idle_);
    }
    if (ioWait_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(5, ioWait_);
    }
    if (irq_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(6, irq_);
    }
    if (softIrq_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(7, softIrq_);
    }
    if (steal_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(8, steal_);
    }
    if (guest_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(9, guest_);
    }
    if (guestNice_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(10, guestNice_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ai.sensorycloud.api.common.CpuSummary)) {
      return super.equals(obj);
    }
    ai.sensorycloud.api.common.CpuSummary other = (ai.sensorycloud.api.common.CpuSummary) obj;

    if (getUser()
        != other.getUser()) return false;
    if (getNice()
        != other.getNice()) return false;
    if (getSystem()
        != other.getSystem()) return false;
    if (getIdle()
        != other.getIdle()) return false;
    if (getIoWait()
        != other.getIoWait()) return false;
    if (getIrq()
        != other.getIrq()) return false;
    if (getSoftIrq()
        != other.getSoftIrq()) return false;
    if (getSteal()
        != other.getSteal()) return false;
    if (getGuest()
        != other.getGuest()) return false;
    if (getGuestNice()
        != other.getGuestNice()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + USER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getUser());
    hash = (37 * hash) + NICE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getNice());
    hash = (37 * hash) + SYSTEM_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSystem());
    hash = (37 * hash) + IDLE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getIdle());
    hash = (37 * hash) + IOWAIT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getIoWait());
    hash = (37 * hash) + IRQ_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getIrq());
    hash = (37 * hash) + SOFTIRQ_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSoftIrq());
    hash = (37 * hash) + STEAL_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSteal());
    hash = (37 * hash) + GUEST_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getGuest());
    hash = (37 * hash) + GUESTNICE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getGuestNice());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ai.sensorycloud.api.common.CpuSummary parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.sensorycloud.api.common.CpuSummary parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.sensorycloud.api.common.CpuSummary parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.sensorycloud.api.common.CpuSummary parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.sensorycloud.api.common.CpuSummary parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.sensorycloud.api.common.CpuSummary parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.sensorycloud.api.common.CpuSummary parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ai.sensorycloud.api.common.CpuSummary parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static ai.sensorycloud.api.common.CpuSummary parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static ai.sensorycloud.api.common.CpuSummary parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ai.sensorycloud.api.common.CpuSummary parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ai.sensorycloud.api.common.CpuSummary parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ai.sensorycloud.api.common.CpuSummary prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Summary of all CPU useage as measured in ticks
   * </pre>
   *
   * Protobuf type {@code sensory.api.common.CpuSummary}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:sensory.api.common.CpuSummary)
      ai.sensorycloud.api.common.CpuSummaryOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ai.sensorycloud.api.common.SensoryApiCommonProto.internal_static_sensory_api_common_CpuSummary_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ai.sensorycloud.api.common.SensoryApiCommonProto.internal_static_sensory_api_common_CpuSummary_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ai.sensorycloud.api.common.CpuSummary.class, ai.sensorycloud.api.common.CpuSummary.Builder.class);
    }

    // Construct using ai.sensorycloud.api.common.CpuSummary.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      user_ = 0L;

      nice_ = 0L;

      system_ = 0L;

      idle_ = 0L;

      ioWait_ = 0L;

      irq_ = 0L;

      softIrq_ = 0L;

      steal_ = 0L;

      guest_ = 0L;

      guestNice_ = 0L;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ai.sensorycloud.api.common.SensoryApiCommonProto.internal_static_sensory_api_common_CpuSummary_descriptor;
    }

    @java.lang.Override
    public ai.sensorycloud.api.common.CpuSummary getDefaultInstanceForType() {
      return ai.sensorycloud.api.common.CpuSummary.getDefaultInstance();
    }

    @java.lang.Override
    public ai.sensorycloud.api.common.CpuSummary build() {
      ai.sensorycloud.api.common.CpuSummary result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ai.sensorycloud.api.common.CpuSummary buildPartial() {
      ai.sensorycloud.api.common.CpuSummary result = new ai.sensorycloud.api.common.CpuSummary(this);
      result.user_ = user_;
      result.nice_ = nice_;
      result.system_ = system_;
      result.idle_ = idle_;
      result.ioWait_ = ioWait_;
      result.irq_ = irq_;
      result.softIrq_ = softIrq_;
      result.steal_ = steal_;
      result.guest_ = guest_;
      result.guestNice_ = guestNice_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ai.sensorycloud.api.common.CpuSummary) {
        return mergeFrom((ai.sensorycloud.api.common.CpuSummary)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ai.sensorycloud.api.common.CpuSummary other) {
      if (other == ai.sensorycloud.api.common.CpuSummary.getDefaultInstance()) return this;
      if (other.getUser() != 0L) {
        setUser(other.getUser());
      }
      if (other.getNice() != 0L) {
        setNice(other.getNice());
      }
      if (other.getSystem() != 0L) {
        setSystem(other.getSystem());
      }
      if (other.getIdle() != 0L) {
        setIdle(other.getIdle());
      }
      if (other.getIoWait() != 0L) {
        setIoWait(other.getIoWait());
      }
      if (other.getIrq() != 0L) {
        setIrq(other.getIrq());
      }
      if (other.getSoftIrq() != 0L) {
        setSoftIrq(other.getSoftIrq());
      }
      if (other.getSteal() != 0L) {
        setSteal(other.getSteal());
      }
      if (other.getGuest() != 0L) {
        setGuest(other.getGuest());
      }
      if (other.getGuestNice() != 0L) {
        setGuestNice(other.getGuestNice());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      ai.sensorycloud.api.common.CpuSummary parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (ai.sensorycloud.api.common.CpuSummary) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private long user_ ;
    /**
     * <pre>
     * normal processes executing in user mode
     * </pre>
     *
     * <code>uint64 user = 1;</code>
     * @return The user.
     */
    @java.lang.Override
    public long getUser() {
      return user_;
    }
    /**
     * <pre>
     * normal processes executing in user mode
     * </pre>
     *
     * <code>uint64 user = 1;</code>
     * @param value The user to set.
     * @return This builder for chaining.
     */
    public Builder setUser(long value) {
      
      user_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * normal processes executing in user mode
     * </pre>
     *
     * <code>uint64 user = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearUser() {
      
      user_ = 0L;
      onChanged();
      return this;
    }

    private long nice_ ;
    /**
     * <pre>
     * niced processes executing in user mode
     * </pre>
     *
     * <code>uint64 nice = 2;</code>
     * @return The nice.
     */
    @java.lang.Override
    public long getNice() {
      return nice_;
    }
    /**
     * <pre>
     * niced processes executing in user mode
     * </pre>
     *
     * <code>uint64 nice = 2;</code>
     * @param value The nice to set.
     * @return This builder for chaining.
     */
    public Builder setNice(long value) {
      
      nice_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * niced processes executing in user mode
     * </pre>
     *
     * <code>uint64 nice = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearNice() {
      
      nice_ = 0L;
      onChanged();
      return this;
    }

    private long system_ ;
    /**
     * <pre>
     * processes executing in kernel mode
     * </pre>
     *
     * <code>uint64 system = 3;</code>
     * @return The system.
     */
    @java.lang.Override
    public long getSystem() {
      return system_;
    }
    /**
     * <pre>
     * processes executing in kernel mode
     * </pre>
     *
     * <code>uint64 system = 3;</code>
     * @param value The system to set.
     * @return This builder for chaining.
     */
    public Builder setSystem(long value) {
      
      system_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * processes executing in kernel mode
     * </pre>
     *
     * <code>uint64 system = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearSystem() {
      
      system_ = 0L;
      onChanged();
      return this;
    }

    private long idle_ ;
    /**
     * <pre>
     * idle cpu
     * </pre>
     *
     * <code>uint64 idle = 4;</code>
     * @return The idle.
     */
    @java.lang.Override
    public long getIdle() {
      return idle_;
    }
    /**
     * <pre>
     * idle cpu
     * </pre>
     *
     * <code>uint64 idle = 4;</code>
     * @param value The idle to set.
     * @return This builder for chaining.
     */
    public Builder setIdle(long value) {
      
      idle_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * idle cpu
     * </pre>
     *
     * <code>uint64 idle = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearIdle() {
      
      idle_ = 0L;
      onChanged();
      return this;
    }

    private long ioWait_ ;
    /**
     * <pre>
     * waiting for I/O to complete
     * </pre>
     *
     * <code>uint64 ioWait = 5;</code>
     * @return The ioWait.
     */
    @java.lang.Override
    public long getIoWait() {
      return ioWait_;
    }
    /**
     * <pre>
     * waiting for I/O to complete
     * </pre>
     *
     * <code>uint64 ioWait = 5;</code>
     * @param value The ioWait to set.
     * @return This builder for chaining.
     */
    public Builder setIoWait(long value) {
      
      ioWait_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * waiting for I/O to complete
     * </pre>
     *
     * <code>uint64 ioWait = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearIoWait() {
      
      ioWait_ = 0L;
      onChanged();
      return this;
    }

    private long irq_ ;
    /**
     * <pre>
     * servicing interrupts
     * </pre>
     *
     * <code>uint64 irq = 6;</code>
     * @return The irq.
     */
    @java.lang.Override
    public long getIrq() {
      return irq_;
    }
    /**
     * <pre>
     * servicing interrupts
     * </pre>
     *
     * <code>uint64 irq = 6;</code>
     * @param value The irq to set.
     * @return This builder for chaining.
     */
    public Builder setIrq(long value) {
      
      irq_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * servicing interrupts
     * </pre>
     *
     * <code>uint64 irq = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearIrq() {
      
      irq_ = 0L;
      onChanged();
      return this;
    }

    private long softIrq_ ;
    /**
     * <pre>
     * servicing softirqs
     * </pre>
     *
     * <code>uint64 softIrq = 7;</code>
     * @return The softIrq.
     */
    @java.lang.Override
    public long getSoftIrq() {
      return softIrq_;
    }
    /**
     * <pre>
     * servicing softirqs
     * </pre>
     *
     * <code>uint64 softIrq = 7;</code>
     * @param value The softIrq to set.
     * @return This builder for chaining.
     */
    public Builder setSoftIrq(long value) {
      
      softIrq_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * servicing softirqs
     * </pre>
     *
     * <code>uint64 softIrq = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearSoftIrq() {
      
      softIrq_ = 0L;
      onChanged();
      return this;
    }

    private long steal_ ;
    /**
     * <pre>
     * counts the ticks spent executing other virtual hosts
     * </pre>
     *
     * <code>uint64 steal = 8;</code>
     * @return The steal.
     */
    @java.lang.Override
    public long getSteal() {
      return steal_;
    }
    /**
     * <pre>
     * counts the ticks spent executing other virtual hosts
     * </pre>
     *
     * <code>uint64 steal = 8;</code>
     * @param value The steal to set.
     * @return This builder for chaining.
     */
    public Builder setSteal(long value) {
      
      steal_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * counts the ticks spent executing other virtual hosts
     * </pre>
     *
     * <code>uint64 steal = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearSteal() {
      
      steal_ = 0L;
      onChanged();
      return this;
    }

    private long guest_ ;
    /**
     * <pre>
     * counts the time spent running a virtual CPU for guest operating systems under the control of the Linux kernel
     * </pre>
     *
     * <code>uint64 guest = 9;</code>
     * @return The guest.
     */
    @java.lang.Override
    public long getGuest() {
      return guest_;
    }
    /**
     * <pre>
     * counts the time spent running a virtual CPU for guest operating systems under the control of the Linux kernel
     * </pre>
     *
     * <code>uint64 guest = 9;</code>
     * @param value The guest to set.
     * @return This builder for chaining.
     */
    public Builder setGuest(long value) {
      
      guest_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * counts the time spent running a virtual CPU for guest operating systems under the control of the Linux kernel
     * </pre>
     *
     * <code>uint64 guest = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearGuest() {
      
      guest_ = 0L;
      onChanged();
      return this;
    }

    private long guestNice_ ;
    /**
     * <pre>
     * time spent running a niced guest
     * </pre>
     *
     * <code>uint64 guestNice = 10;</code>
     * @return The guestNice.
     */
    @java.lang.Override
    public long getGuestNice() {
      return guestNice_;
    }
    /**
     * <pre>
     * time spent running a niced guest
     * </pre>
     *
     * <code>uint64 guestNice = 10;</code>
     * @param value The guestNice to set.
     * @return This builder for chaining.
     */
    public Builder setGuestNice(long value) {
      
      guestNice_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * time spent running a niced guest
     * </pre>
     *
     * <code>uint64 guestNice = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearGuestNice() {
      
      guestNice_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:sensory.api.common.CpuSummary)
  }

  // @@protoc_insertion_point(class_scope:sensory.api.common.CpuSummary)
  private static final ai.sensorycloud.api.common.CpuSummary DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ai.sensorycloud.api.common.CpuSummary();
  }

  public static ai.sensorycloud.api.common.CpuSummary getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CpuSummary>
      PARSER = new com.google.protobuf.AbstractParser<CpuSummary>() {
    @java.lang.Override
    public CpuSummary parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CpuSummary(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CpuSummary> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CpuSummary> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ai.sensorycloud.api.common.CpuSummary getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

